{"version":3,"sources":["components/Navbar.tsx","components/CoderHamming/CoderHamming.ts","components/CoderCRC/CoderCRC.ts","components/Form.tsx","components/SnackbarError.tsx","components/ResultCalculating.tsx","components/Content.tsx","App.tsx","reportWebVitals.ts","index.tsx","state.ts"],"names":["useStyles","makeStyles","theme","createStyles","root","flexGrow","title","Navbar","classes","className","AppBar","position","Toolbar","Typography","variant","Button","href","color","CoderHamming","inputString","binArray","binStringArray","split","map","letter","charCodeAt","toString","str","length","join","getBinaryArray","codeArray","outputArray","maxPow","getMaxPow","index","push","fillCodeArray","getOutputCode","binNum","isPow","shift","getCodeArray","getControlBinArray","ControlBinArray","filterArray","oneFilter","filter","value","i","engineFilter","Filter","array","item","power","flag","DecoderHamming","inputCodeArray","recalcArray","recalcInput–°ode","fixedMessage","binMessage","countLetters","splice","binStr","parseInt","num","String","fromCharCode","decodeMessege","indexError","fixError","findIndexError","compareArrays","indexErrorsArray","reduce","prev","next","recalcMessageArray","indexErrors","errorLink","outputCode","max","Math","floor","random","log2","poly","CoderCRC","stringArray","codedWord","concatBinArrays","divPoly","preparationBinArray","concat","remainderArray","division","remainder","binarySequence","DecoderCRC","inputCode","slicedCode","checkMessage","binLetter","checkRemainder","preparBinArray","display","flexWrap","textField","marginLeft","spacing","marginRight","width","Form","appState","setAppState","onSubmit","event","preventDefault","hammingCodeSecuence","errHamming","indexHammingErr","errorTransmission","calculation","hamming","outputCodeSecuence","inputCodeSecuence","outputString","crc","noValidate","autoComplete","TextField","error","Error","id","label","onChange","target","style","margin","fullWidth","InputLabelProps","shrink","FormControlLabel","control","Checkbox","checked","name","type","Alert","props","elevation","marginTop","SnackbarError","handleClose","reason","Snackbar","open","autoHideDuration","onClose","severity","ResultCalculating","Content","createMuiTheme","overrides","MuiButton","App","state","React","useState","Container","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.342e3196.chunk.js","sourcesContent":["import React from 'react';\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n    }),\r\n);\r\n\r\nexport const Navbar: React.FC = () => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <Typography variant=\"h6\" className={classes.title}>\r\n                        –ö–æ–¥–µ—Ä—ã –•—ç–º–º–∏–Ω–≥–∞ –∏ CRC\r\n                    </Typography>\r\n                    <Button\r\n                        href=\"https://github.com/AnatolyKaz/Coder-Hamming-CRC\"\r\n                        color=\"inherit\"\r\n                    >\r\n                        –ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥\r\n                    </Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n        </div>\r\n    )\r\n}","import { TbinaryArray } from \"../../state\"\r\n///=======================Coder======================================\r\nexport function CoderHamming(inputString: string): TbinaryArray {\r\n    let binArray: TbinaryArray = getBinaryArray(inputString)\r\n    let codeArray: TbinaryArray = fillCodeArray(binArray)\r\n\r\n    codeArray = getCodeArray(codeArray, binArray)\r\n\r\n    let ControlBinArray: TbinaryArray = getControlBinArray(codeArray)\r\n    let outputCode: TbinaryArray = getOutputCode(codeArray, ControlBinArray)\r\n\r\n    return outputCode\r\n}\r\n\r\nexport function getOutputCode(codeArray: TbinaryArray, ControlBinArray: TbinaryArray): TbinaryArray {\r\n    let maxPow: number = getMaxPow(codeArray)\r\n    let outputArray: TbinaryArray = codeArray.map((binNum, index) => {\r\n    \r\n        return isPow(maxPow, index + 1) ? ControlBinArray.shift() : binNum\r\n    } )\r\n\r\n    return outputArray\r\n}\r\n\r\nexport function getControlBinArray (codeArray: TbinaryArray): TbinaryArray {\r\n    let filteredArray: TbinaryArray = Filter(codeArray).map( array => {\r\n        let length: number = array.filter( item => (item === '1' ? 1 : 0)).length\r\n\r\n        return length % 2 === 0 ? '0' : '1' \r\n    })\r\n\r\n    return filteredArray\r\n}\r\n\r\nexport function Filter(codeArray: TbinaryArray): TbinaryArray[] {\r\n    let filterArray: TbinaryArray[] = []\r\n    let maxPow: number = getMaxPow(codeArray)\r\n\r\n    const oneFilter: TbinaryArray = codeArray.filter(( value, index ) => ((index + 1) % 2 !== 0 ? 1 : 0 ))\r\n\r\n    filterArray.push(oneFilter)\r\n\r\n    for (let i = 1; i <= maxPow; i++) {\r\n        filterArray.push(engineFilter(2 ** i, codeArray))\r\n    }\r\n\r\n    return filterArray\r\n}\r\n\r\nexport function engineFilter(power: number, codeArray: TbinaryArray): TbinaryArray {\r\n    let outputArray: TbinaryArray = []\r\n    let flag: number = 0\r\n\r\n    for (let i = power - 1; i < codeArray.length; i++) {\r\n        if (flag < power) {\r\n            outputArray.push(codeArray[i])\r\n        } \r\n        \r\n        flag++\r\n        \r\n        if (flag === power * 2) {\r\n            flag = 0\r\n        }\r\n    }\r\n\r\n    return outputArray\r\n}\r\n\r\n\r\nexport function getBinaryArray(inputString: string): TbinaryArray {\r\n    let stringArray: string[] = inputString.split('') \r\n    let binStringArray: string[] = stringArray.map( letter => (`${(letter.charCodeAt(0)).toString(2)}`))\r\n\r\n    binStringArray = binStringArray.map( (str: string) => { \r\n\r\n        if (str.length === 7) {\r\n            str = `0${str}`\r\n        } else if (str.length === 6) {\r\n            str = `00${str}`\r\n        }\r\n\r\n        return str\r\n    })\r\n\r\n    let outputArray: TbinaryArray = binStringArray.join('').split('') as ('1' | '0' | undefined)[]\r\n    return outputArray\r\n}\r\n\r\n\r\nexport function getCodeArray(codeArray: TbinaryArray, binArray: TbinaryArray): TbinaryArray {\r\n    let maxPow: number = getMaxPow(codeArray)\r\n    let outputArray = codeArray.map((binNum, index: number) => {\r\n    \r\n        return isPow(maxPow, index + 1) ? binNum : binArray.shift()\r\n    } )\r\n\r\n    return  outputArray\r\n}\r\n\r\n\r\n\r\nexport function fillCodeArray(binArray: TbinaryArray): TbinaryArray {\r\n    let outputArray: TbinaryArray = []\r\n    let maxPow: number = getMaxPow(binArray)\r\n\r\n    for (let index = 0; index < binArray.length + maxPow + 1; index++) {\r\n        outputArray.push('0')\r\n    }\r\n\r\n    return outputArray\r\n}\r\n\r\nexport function isPow(maxPow: number, index: number): boolean {\r\n\r\n    for (let i = 0; i <= maxPow; i++) {\r\n\r\n        if (index === 2 ** i ) {\r\n            return true\r\n        } \r\n    }\r\n\r\n    return false\r\n}\r\n///=======================Coder======================================\r\n///===========================Decoder================================\r\nexport function DecoderHamming(inputCodeArray: TbinaryArray): string {\r\n    let recalcArray = recalcInput–°ode(inputCodeArray)\r\n    let ControlBinArray = getControlBinArray(recalcArray)\r\n    let recalcMessageArray = getOutputCode(recalcArray, ControlBinArray)\r\n    let indexErrorsArray = compareArrays(inputCodeArray, recalcMessageArray)\r\n    let indexError = findIndexError(indexErrorsArray)\r\n    let fixedMessage = fixError(indexError, inputCodeArray)\r\n    let message = decodeMessege(fixedMessage)\r\n\r\n    return message\r\n}\r\n\r\nexport function decodeMessege(fixedMessage: TbinaryArray): string {\r\n    let maxPow: number = getMaxPow(fixedMessage)\r\n    let binMessage = fixedMessage.filter( (letter, index) => (isPow(maxPow, index + 1) ? 0 : 1 ))\r\n    let countLetters: number = binMessage.length / 8\r\n    let binArray: string[] = []\r\n\r\n    for (let index = 0; index < countLetters; index++) {\r\n        binArray.push(binMessage.splice(0, 8).join(''))\r\n    }\r\n\r\n    let message: string = binArray.map( binStr => ( parseInt( binStr, 2))).map( num => ( String.fromCharCode(num))).join('')\r\n\r\n    return message\r\n}\r\n\r\nexport function fixError(indexError: null | number, inputCodeArray: TbinaryArray): TbinaryArray {\r\n\r\n    if (typeof indexError === 'number') {\r\n        let outputArray: TbinaryArray = inputCodeArray.map( (letter, index) => {\r\n\r\n            if (index === indexError) {\r\n                if (letter === '0') {\r\n                    letter = '1'\r\n                } else {\r\n                    letter = '0'\r\n                }\r\n            }\r\n    \r\n            return letter\r\n        })\r\n    \r\n        return outputArray\r\n    } else {\r\n        return inputCodeArray\r\n    }\r\n}\r\n\r\nexport function findIndexError(indexErrorsArray: number[]): null | number {\r\n\r\n    if (indexErrorsArray.length === 0) {\r\n        return null\r\n    } else {\r\n        return indexErrorsArray.reduce((prev, next) => (prev + next)) - 1\r\n    }\r\n}\r\n\r\nexport function compareArrays(inputCodeArray: TbinaryArray, recalcMessageArray: TbinaryArray): number[] {\r\n    let indexErrors: number[] = []\r\n\r\n    for (let index = 0; index < inputCodeArray.length; index++) {\r\n        if (inputCodeArray[index] !== recalcMessageArray[index] ) {\r\n            indexErrors.push(index + 1)\r\n        }\r\n    }\r\n\r\n    return indexErrors\r\n}\r\n\r\nexport function recalcInput–°ode(inputCodeArray: TbinaryArray): TbinaryArray {\r\n    let maxPow: number = getMaxPow(inputCodeArray)\r\n    return inputCodeArray.map( (letter, index) => (isPow(maxPow, index + 1) ? '0' : letter))\r\n}\r\n///===========================Decoder================================\r\n\r\nexport function errorLink(outputCode: TbinaryArray): TbinaryArray {\r\n    let max: number = outputCode.length\r\n    let indexError: number = Math.floor(Math.random() * (max + 1))\r\n    let outputArray = outputCode.map( (binNum, index: number) => {\r\n        if (indexError === index) {\r\n            if (binNum === '1') {\r\n                binNum = '0'\r\n            }else {\r\n                binNum = '1'\r\n            }\r\n        }\r\n        return binNum\r\n    })\r\n\r\n    return outputArray\r\n}\r\n\r\nexport function getMaxPow(array: TbinaryArray): number {\r\n    return Math.floor(Math.log2(array.length))\r\n}\r\n\r\n","import { TbinaryArray } from \"../../state\"\r\n\r\nconst poly: string[] =   ['1','1','1','0','1','0','1','0','1']     // CRC-8 (111010101)\r\n\r\n\r\n////===========================Coder================================\r\nexport function CoderCRC(inputString: string): TbinaryArray {\r\n    let stringArray = inputString.split('')\r\n    let outputCode: TbinaryArray = []\r\n\r\n    for (let index = 0; index < stringArray.length; index++) {\r\n        let binArray = getBinaryArray(stringArray[index])\r\n        let preparBinArray = preparationBinArray(binArray)\r\n        let remainderArray = divPoly(preparBinArray)\r\n        let codedWord = concatBinArrays(binArray, remainderArray) \r\n        outputCode = outputCode.concat(codedWord)\r\n    }\r\n    return outputCode\r\n}\r\n\r\nexport function concatBinArrays(binArray: TbinaryArray, remainderArray: TbinaryArray): TbinaryArray {\r\n    return binArray.concat(remainderArray)\r\n}\r\n\r\nexport function division(array: TbinaryArray): TbinaryArray {\r\n    let remainder: TbinaryArray = []\r\n\r\n        for (let index = 0; index <= 8 ; index++) {\r\n            if(array[index] === poly[index]) {\r\n                remainder.push('0')\r\n            } else {\r\n                remainder.push('1')\r\n            }\r\n        }\r\n        \r\n    return remainder\r\n}\r\n\r\nexport function preparationBinArray(binArray: TbinaryArray): TbinaryArray {\r\n    let outputArray: TbinaryArray = [...binArray]\r\n\r\n    for (let i = 0; i < poly.length - 1; i++) {\r\n        outputArray.push('0')\r\n    }\r\n\r\n    return outputArray\r\n}\r\n\r\nfunction getBinaryArray(letter: string): TbinaryArray {\r\n\r\n    let binarySequence = (letter.charCodeAt(0)).toString(2)\r\n    \r\n    if (binarySequence.length === 7) {\r\n        binarySequence = `0${binarySequence}`\r\n    } else if (binarySequence.length === 6) {\r\n        binarySequence = `00${binarySequence}`\r\n    }\r\n\r\n    return binarySequence.split('') as ('1' | '0' | undefined)[]\r\n}\r\n////===========================Coder================================\r\n////===========================Decoder================================\r\n\r\nexport function DecoderCRC(inputCode: TbinaryArray): string {\r\n    let countLetters: number = inputCode.length / 16\r\n    let slicedCode = inputCode\r\n    let checkMessage: string[] = []\r\n\r\n    for (let index = 0; index < countLetters; index++) {\r\n        let binLetter: TbinaryArray = slicedCode.splice(0, 16)\r\n        let remainderArray = divPoly(binLetter)\r\n        let check = checkRemainder(remainderArray)\r\n        if (check) {\r\n            checkMessage.push(String.fromCharCode(parseInt( binLetter.splice(0, 8).join(''), 2))) \r\n        } else {\r\n            return '–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞!'\r\n        }\r\n    }\r\n    \r\n    return  checkMessage.join('') \r\n}\r\n\r\nexport function checkRemainder(remainderArray: TbinaryArray): boolean {\r\n    let checkArray = remainderArray.filter( binNum => ( binNum === '0' ? 0 : 1))\r\n    \r\n    if (checkArray.length === 0) {\r\n        return true\r\n    }else {\r\n        return false\r\n    }\r\n}\r\n\r\n////===========================Decoder================================\r\n\r\nexport function divPoly(preparBinArray: TbinaryArray): TbinaryArray {\r\n    let remainderArray = division(preparBinArray)\r\n\r\n    if (remainderArray[0] === '1' ) {\r\n        remainderArray = division(remainderArray)\r\n    }\r\n\r\n    for (let i = 9; i < preparBinArray.length; i++) {\r\n        remainderArray.shift()\r\n        remainderArray.push(preparBinArray[i])\r\n        remainderArray = division(remainderArray)\r\n        \r\n    }\r\n\r\n    remainderArray.shift()\r\n\r\n    return remainderArray\r\n}\r\n","import React from \"react\"\r\nimport TextField from \"@material-ui/core/TextField\"\r\nimport Checkbox from \"@material-ui/core/Checkbox\"\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\"\r\nimport Button from \"@material-ui/core/Button\"\r\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\"\r\nimport { Istate } from \"../state\"\r\nimport {\r\n    CoderHamming,\r\n    compareArrays,\r\n    DecoderHamming,\r\n    errorLink,\r\n    findIndexError,\r\n} from \"./CoderHamming/CoderHamming\"\r\nimport { CoderCRC, DecoderCRC } from \"./CoderCRC/CoderCRC\"\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            display: \"flex\",\r\n            flexWrap: \"wrap\",\r\n        },\r\n        textField: {\r\n            marginLeft: theme.spacing(1),\r\n            marginRight: theme.spacing(1),\r\n            width: \"25ch\",\r\n        },\r\n    })\r\n)\r\n\r\nexport interface IFormProps {\r\n    setAppState(callback: (state: Istate) => Istate): void\r\n    appState: Istate\r\n}\r\n\r\nexport const Form: React.FC<IFormProps> = ({ appState, setAppState }) => {\r\n    const classes = useStyles()\r\n\r\n    const handleError = (event: React.ChangeEvent<HTMLInputElement>): void => {\r\n        setAppState((prev: Istate) => {\r\n            return { ...prev, errorTransmission: event.target.checked }\r\n        })\r\n    }\r\n\r\n    const changeHandler = (\r\n        event: React.ChangeEvent<HTMLInputElement>\r\n    ): void => {\r\n        setAppState((prev: Istate) => {\r\n            if (event.target.value.charCodeAt(0) <= 120) {\r\n                return { ...prev, inputString: event.target.value }\r\n            } else if (event.target.value !== \"\") {\r\n                return { ...prev, inputString: \"\", Error: true }\r\n            } else {\r\n                return { ...prev, inputString: \"\" }\r\n            }\r\n        })\r\n    }\r\n\r\n    const submitHandler = (event: React.SyntheticEvent): void => {\r\n        event.preventDefault()\r\n\r\n        setAppState((prev: Istate) => {\r\n            let hammingCodeSecuence = CoderHamming(prev.inputString)\r\n            let errHamming = errorLink(hammingCodeSecuence)\r\n            let indexHammingErr = findIndexError(\r\n                compareArrays(hammingCodeSecuence, errHamming)\r\n            )\r\n            let state: Istate\r\n            if (prev.errorTransmission) {\r\n                state = {\r\n                    ...prev,\r\n                    calculation: true,\r\n                    hamming: {\r\n                        outputCodeSecuence: hammingCodeSecuence,\r\n                        indexError: indexHammingErr\r\n                            ? indexHammingErr + 1\r\n                            : null,\r\n                        inputCodeSecuence: errHamming,\r\n                        outputString: DecoderHamming(errHamming),\r\n                    },\r\n                    crc: {\r\n                        outputCodeSecuence: CoderCRC(prev.inputString),\r\n                        inputCodeSecuence: CoderCRC(prev.inputString),\r\n                        outputString: DecoderCRC(\r\n                            errorLink(CoderCRC(prev.inputString))\r\n                        ),\r\n                    },\r\n                }\r\n            } else {\r\n                state = {\r\n                    ...prev,\r\n                    calculation: true,\r\n                    hamming: {\r\n                        outputCodeSecuence: hammingCodeSecuence,\r\n                        indexError: null,\r\n                        inputCodeSecuence: hammingCodeSecuence,\r\n                        outputString: DecoderHamming(hammingCodeSecuence),\r\n                    },\r\n                    crc: {\r\n                        outputCodeSecuence: CoderCRC(prev.inputString),\r\n                        inputCodeSecuence: CoderCRC(prev.inputString),\r\n                        outputString: DecoderCRC(CoderCRC(prev.inputString)),\r\n                    },\r\n                }\r\n            }\r\n\r\n            return state\r\n        })\r\n    }\r\n\r\n    return (\r\n        <form\r\n            className={classes.root}\r\n            onSubmit={submitHandler}\r\n            noValidate\r\n            autoComplete=\"off\"\r\n        >\r\n            <TextField\r\n                error ={appState.Error}\r\n                id={\r\n                    appState.Error\r\n                        ? \"filled-error-full-width\"\r\n                        : \"filled-full-width\"\r\n                }\r\n                label={\r\n                    appState.Error\r\n                        ? \"–û—à–∏–±–∫–∞!\"\r\n                        : \"–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\"\r\n                }\r\n                onChange={changeHandler}\r\n                value={appState.inputString}\r\n                style={{ margin: 8 }}\r\n                fullWidth\r\n                margin=\"normal\"\r\n                InputLabelProps={{\r\n                    shrink: true,\r\n                }}\r\n                variant=\"filled\"\r\n            />\r\n            <FormControlLabel\r\n                control={\r\n                    <Checkbox\r\n                        checked={appState.errorTransmission}\r\n                        onChange={handleError}\r\n                        name=\"ErrCheck\"\r\n                    />\r\n                }\r\n                label=\"–í–Ω–µ—Å—Ç–∏ –æ—à–∏–±–∫—É –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ —Å–æ–æ–±—â–µ–Ω–∏—è?\"\r\n            />\r\n            <Button type=\"submit\" variant=\"contained\" color=\"primary\">\r\n                –ö–æ–¥–∏—Ä–æ–≤–∞—Ç—å\r\n            </Button>\r\n        </form>\r\n    )\r\n}\r\n","import React from \"react\"\r\nimport Snackbar from \"@material-ui/core/Snackbar\"\r\nimport MuiAlert, { AlertProps } from \"@material-ui/lab/Alert\"\r\nimport { makeStyles, Theme } from \"@material-ui/core/styles\"\r\nimport { IFormProps } from \"./Form\"\r\nimport { Istate } from \"../state\"\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n    root: {\r\n        width: \"100%\",\r\n        \"& > * + *\": {\r\n            marginTop: theme.spacing(2),\r\n        },\r\n    },\r\n}))\r\n\r\ninterface ISnackbarError extends IFormProps {}\r\n\r\nexport const SnackbarError: React.FC<ISnackbarError> = ({\r\n    appState,\r\n    setAppState,\r\n}) => {\r\n    const classes = useStyles()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === \"clickaway\") {\r\n            return\r\n        }\r\n\r\n        setAppState((prev: Istate) => {\r\n            return { ...prev, Error: false }\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Snackbar\r\n                open={appState.Error}\r\n                autoHideDuration={1000}\r\n                onClose={handleClose}\r\n            >\r\n                <Alert onClose={handleClose} severity=\"error\">\r\n                    –í—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–µ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã! –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ —Ä–∞—Å–∫–ª–∞–¥–∫—É!\r\n                </Alert>\r\n            </Snackbar>\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\"\r\nimport { Istate } from \"../state\"\r\n\r\ninterface IResultCalculatingProps {\r\n    appState: Istate\r\n}\r\n\r\nexport const ResultCalculating: React.FC<IResultCalculatingProps> = ({\r\n    appState,\r\n}) => {\r\n    return (\r\n        <>\r\n            <div>\r\n                –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∞ –≤—ã—Ö–æ–¥–µ –∫–æ–¥–µ—Ä–∞ –•—ç–º–º–∏–Ω–≥–∞:{\" \"}\r\n                {appState.hamming.outputCodeSecuence}\r\n            </div>\r\n            {appState.hamming.indexError ? (\r\n                <div>–ù–æ–º–µ—Ä –æ—à–∏–±–æ—á–Ω–æ–≥–æ –±–∏—Ç–∞: {appState.hamming.indexError}</div>\r\n            ) : null}\r\n            <div>\r\n                –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∞ –≤—Ö–æ–¥–µ –¥–µ–∫–æ–¥–µ—Ä–∞:{\" \"}\r\n                {appState.hamming.inputCodeSecuence}\r\n            </div>\r\n            <div>\r\n                –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –≤—ã—Ö–æ–¥–µ –¥–µ–∫–æ–¥–µ—Ä–∞: {appState.hamming.outputString}\r\n            </div>\r\n            <div>\r\n                –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∞ –≤—ã—Ö–æ–¥–µ –∫–æ–¥–µ—Ä–∞ CRC:{\" \"}\r\n                {appState.crc.outputCodeSecuence}\r\n            </div>\r\n            <div>\r\n                –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∞ –≤—Ö–æ–¥–µ –¥–µ–∫–æ–¥–µ—Ä–∞:{\" \"}\r\n                {appState.crc.inputCodeSecuence}\r\n            </div>\r\n            <div>–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –≤—ã—Ö–æ–¥–µ –¥–µ–∫–æ–¥–µ—Ä–∞: {appState.crc.outputString}</div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport const Content: React.FC = () => {\r\n    return (\r\n        <div>\r\n            <hr />\r\n            –î–ª—è —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–æ–ª–µ –≤—ã—à–µ –∏ –Ω–∞–∂–º–∏—Ç–µ\r\n            \"–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å\". <br />\r\n            –î–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ\r\n            —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –≥–∞–ª–æ—á–∫—É.\r\n            <br />\r\n            –ü–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º –∫–∞–∫ —Ä–µ–∞–ª–∏–∑—É–µ—Ç—Å—è –∫–æ–¥–∏—Ä–æ–≤–∫–∞ –•—ç–º–º–∏–Ω–≥–∞ –≤—ã\r\n            –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å <a href=\"https://clck.ru/TajiJ\">–∑–¥–µ—Å—å(Wiki)</a> –∏{\" \"}\r\n            <a href=\"https://habr.com/ru/post/140611/\">–∑–¥–µ—Å—å(habr)</a>. <br />\r\n            –¢–∞–∫ –∂–µ –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –∫–æ–¥–∏—Ä–æ–≤–∫–µ CRC –ø–æ{\" \"}\r\n            <a href=\"https://clck.ru/TajeS\">—ç—Ç–æ–π(Wiki)</a> –∏{\" \"}\r\n            <a href=\"https://clck.ru/Tajt4\">—ç—Ç–æ–π</a> —Å—Å—ã–ª–∫–∞–º.\r\n        </div>\r\n    )\r\n}","import React from \"react\"\r\nimport { Container, createMuiTheme, MuiThemeProvider } from \"@material-ui/core\"\r\nimport { Navbar } from \"./components/Navbar\"\r\nimport { Form } from \"./components/Form\"\r\nimport { Istate } from \"./state\"\r\nimport { SnackbarError } from \"./components/SnackbarError\"\r\nimport { ResultCalculating } from \"./components/ResultCalculating\"\r\nimport { Content } from \"./components/Content\"\r\n\r\ninterface IAppProps {\r\n    state: Istate\r\n}\r\n\r\nconst theme = createMuiTheme({\r\n    overrides: {\r\n        MuiButton: {\r\n            root: {\r\n                margin: \"10px\",\r\n            },\r\n        },\r\n    },\r\n})\r\n\r\nconst App: React.FC<IAppProps> = ({ state }) => {\r\n    const [appState, setAppState] = React.useState(state)\r\n\r\n    return (\r\n        <Container>\r\n            <>\r\n                <MuiThemeProvider theme={theme}>\r\n                    <Navbar />\r\n                    <Form appState={appState} setAppState={setAppState} />\r\n                    {appState.calculation ? (\r\n                        <ResultCalculating appState={appState} />\r\n                    ) : null}\r\n                    <Content />\r\n                </MuiThemeProvider>\r\n                <SnackbarError appState={appState} setAppState={setAppState} />\r\n            </>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport './index.css'\r\nimport 'fontsource-roboto';\r\nimport { state } from './state';\r\n\r\n\r\nReactDOM.render(\r\n    <App state={state} />,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","export type TbinaryArray = ('1' | '0' | undefined)[]\r\n\r\nexport interface Istate {\r\n    inputString: string,\r\n    Error: boolean,\r\n    errorTransmission: boolean,\r\n    calculation: boolean,\r\n    hamming: IHamming,\r\n    crc: ICRC\r\n}\r\n\r\ninterface IHamming {\r\n    outputCodeSecuence: TbinaryArray,\r\n    indexError: number | null,\r\n    inputCodeSecuence: TbinaryArray,\r\n    outputString: string\r\n}\r\n\r\ninterface ICRC {\r\n    outputCodeSecuence: TbinaryArray,\r\n    inputCodeSecuence: TbinaryArray,\r\n    outputString: string\r\n}\r\n\r\nexport let state = {\r\n    inputString: '',\r\n    Error: false,\r\n    errorTransmission: false,\r\n    calculation: false,\r\n    hamming: {\r\n        outputCodeSecuence: [],\r\n        indexError: null,\r\n        inputCodeSecuence: [],\r\n        outputString: ''\r\n    },\r\n    crc: {\r\n        outputCodeSecuence: [],\r\n        inputCodeSecuence: [],\r\n        outputString: ''\r\n    }\r\n}"],"sourceRoot":""}